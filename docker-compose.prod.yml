version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      # image: conduit-api:latest
      args:
        INSTALL_DEV: false
    restart: unless-stopped
    expose:
      - "8000"
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - PYTHONPATH=/code
    env_file: .env.prod
    volumes:
      - static_volume:/code/conduit/static
      - media_volume:/code/conduit/media
      - logs_volume:/code/conduit/logs
    depends_on:
      - redis
      - postgres
    networks:
      - app-network
    command: uvicorn config.asgi:application --host 0.0.0.0 --port 8000 --workers 4

  postgres:
    image: postgres:15
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file: .env.prod
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/code/conduit/static
      - media_volume:/code/conduit/media
      - ./nginx/conf.d/:/etc/nginx/conf.d/
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app
    networks:
      - app-network

  certbot:
    image: certbot/certbot:latest
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    networks:
      - app-network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  logs_volume:

networks:
  app-network:
    driver: bridge
