version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    # image: ghcr.io/bogdan-veliscu/conduit-backend:latest
    container_name: conduit-api
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=0
      - POSTGRES_HOST=${POSTGRES_HOST:-db}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DOMAIN=${DOMAIN}
      - ALLOWED_HOSTS=${DOMAIN}
      - REDIS_HOST=redis
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - static_volume:/code/conduit/staticfiles
      - media_volume:/code/conduit/media
      - ./logs:/code/conduit/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
        python manage.py makemigrations --noinput &&
        ython manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        gunicorn conduit.config.asgi:application --bind 0.0.0.0:8000 --workers 4 --worker-class uvicorn.workers.UvicornWorker --max-requests 1000 --max-requests-jitter 50 --access-logfile - --error-logfile -
      "

  frontend:
    image: ghcr.io/bogdan-veliscu/conduit-frontend:latest
    platform: linux/amd64
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - NEXT_PUBLIC_API_URL=https://${DOMAIN}/api
      - NEXT_PUBLIC_BACKEND_URL=https://${DOMAIN}
      - NEXTAUTH_URL=https://${DOMAIN}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL_INTERNAL=http://frontend:3000
      - NEXTAUTH_TRUST_HOST=true
      - HOSTNAME=0.0.0.0
      - PORT=3000
      - NEXT_PUBLIC_VERCEL_URL=${DOMAIN}
      - NEXT_PUBLIC_APP_URL=https://${DOMAIN}
      - NEXT_PUBLIC_TRUSTED_HOSTS=${DOMAIN}
      - NEXT_PUBLIC_SITE_URL=https://${DOMAIN}
      - NODE_ENV=production
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      app:
        condition: service_healthy

  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    sysctls:
      net.core.somaxconn: 1024
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  db:
    image: postgres:15
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    expose:
      - "5432"

  nginx:
    image: nginx:1.25-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env.prod
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/templates:/etc/nginx/templates:ro
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - static_volume:/code/conduit/staticfiles:ro
      - media_volume:/code/conduit/media:ro
    environment:
      - DOMAIN=${DOMAIN}
    command: >
      /bin/sh -c '
      mkdir -p /tmp/nginx &&
      echo "Using domain: $$DOMAIN" &&
      if [ -f /etc/letsencrypt/live/brandfocus.ai/fullchain.pem ]; then
        echo "Found SSL certificates, using HTTPS config" &&
        DOLLAR='$$' envsubst '$$domain' < /etc/nginx/templates/https.conf.template > /tmp/nginx/default.conf;
      else
        echo "No SSL certificates found, using HTTP config" &&
        DOLLAR='$$' envsubst '$$domain' < /etc/nginx/templates/http.conf.template > /tmp/nginx/default.conf;
      fi &&
      echo "Generated Nginx config:" &&
      cat /tmp/nginx/default.conf &&
      cp /tmp/nginx/default.conf /etc/nginx/conf.d/ &&
      echo "Starting Nginx..." &&
      nginx -t &&
      nginx -g "daemon off;"'
    depends_on:
      app:
        condition: service_healthy

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
  static_volume:
  media_volume:
  redis_data:
