version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    # image: ghcr.io/bogdan-veliscu/conduit-backend:latest
    container_name: conduit-api
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=0
      - POSTGRES_HOST=${POSTGRES_HOST:-db}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DOMAIN=${DOMAIN}
      - ALLOWED_HOSTS=${DOMAIN}
      - REDIS_HOST=redis
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - static_volume:/code/conduit/staticfiles
      - media_volume:/code/conduit/media
      - ./logs:/code/conduit/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: gunicorn conduit.config.asgi:application --bind 0.0.0.0:8000 --workers 4 --worker-class uvicorn.workers.UvicornWorker --max-requests 1000 --max-requests-jitter 50 --access-logfile - --error-logfile -

  frontend:
    image: ghcr.io/bogdan-veliscu/conduit-frontend:latest
    platform: linux/arm64
    environment:
      - NEXT_PUBLIC_API_URL=https://${DOMAIN}/api
      - NEXTAUTH_URL=https://${DOMAIN}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    depends_on:
      app:
        condition: service_healthy

  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  db:
    image: postgres:15
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_certs:/etc/postgresql/ssl:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "5432"

  nginx:
    image: nginx:1.25-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/code/conduit/staticfiles:ro
      - media_volume:/code/conduit/media:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  postgres-certs:
    image: postgres:15
    restart: "no"
    volumes:
      - postgres_certs:/ssl
    user: "70:70"  # postgres user
    entrypoint: |
      bash -c '
      echo "Debug: Current user and group" &&
      id &&
      echo "Debug: Creating temporary directory" &&
      TEMP_DIR=$(mktemp -d) &&
      echo "Debug: Temporary directory permissions" &&
      ls -la $TEMP_DIR &&
      echo "Debug: Generating certificate in temporary directory" &&
      openssl req -new -x509 -days 365 -nodes \
        -out $TEMP_DIR/server.crt \
        -keyout $TEMP_DIR/server.key \
        -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost" &&
      echo "Debug: Setting temporary file permissions" &&
      chmod 600 $TEMP_DIR/server.key &&
      chmod 644 $TEMP_DIR/server.crt &&
      echo "Debug: SSL mount point permissions" &&
      ls -la /ssl &&
      echo "Debug: Copying files to final location" &&
      cp $TEMP_DIR/server.key /ssl/ &&
      cp $TEMP_DIR/server.crt /ssl/ &&
      echo "Debug: Cleaning up temporary directory" &&
      rm -rf $TEMP_DIR &&
      echo "Debug: Final SSL directory contents" &&
      ls -la /ssl/'
    profiles: ["setup"]

volumes:
  postgres_data:
  postgres_certs:  # New volume for SSL certificates
  static_volume:
  media_volume:
  redis_data:
