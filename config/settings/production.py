"""
Django settings for conduit project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import sys
from pathlib import Path
from django.core.exceptions import ImproperlyConfigured

print("="*80)
print("Loading production settings...")
print(f"Current working directory: {os.getcwd()}")
print(f"PYTHONPATH: {os.getenv('PYTHONPATH')}")
print(f"sys.path: {sys.path}")
print(f"__file__: {__file__}")
print(f"File exists: {os.path.exists(__file__)}")
print(f"Parent directory contents: {os.listdir(os.path.dirname(__file__))}")
print("="*80)

from .base import *

def get_env_variable(var_name):
    """Get the environment variable or return exception."""
    value = os.getenv(var_name)
    if not value:
        raise ImproperlyConfigured(f"Set the {var_name} environment variable")
    return value

# Add SECRET_KEY configuration
SECRET_KEY = get_env_variable("DJANGO_SECRET_KEY")

DEBUG = False

DATABASE_ROUTERS = ["config.database_routers.ShardRouter"]

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = '/code/conduit/static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = '/code/conduit/media/'

# Security settings
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = False  # Temporarily disabled for debugging
CSRF_COOKIE_SECURE = False  # Temporarily disabled for debugging
SECURE_SSL_REDIRECT = False  # Temporarily disabled for debugging

# HSTS settings
SECURE_HSTS_SECONDS = 0  # Temporarily disabled for debugging
SECURE_HSTS_INCLUDE_SUBDOMAINS = False  # Temporarily disabled for debugging
SECURE_HSTS_PRELOAD = False  # Temporarily disabled for debugging

# Content security policy
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'

# Allowed hosts - Updated for brandfocus.ai
ALLOWED_HOSTS = ['*']  # Allow all hosts temporarily for debugging
USE_X_FORWARDED_HOST = True  # Trust X-Forwarded-Host header from proxy

print(f"ALLOWED_HOSTS in production.py: {ALLOWED_HOSTS}")

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # Temporarily enabled for debugging
CORS_ALLOWED_ORIGINS = [
    "https://brandfocus.ai",
    "https://www.brandfocus.ai",
    "https://api.brandfocus.ai",
    "http://localhost:3000",
    "http://localhost:8000",
]

# Security settings
CSRF_TRUSTED_ORIGINS = [
    "https://brandfocus.ai",
    "https://www.brandfocus.ai",
    "https://api.brandfocus.ai",
]

# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': os.getenv('REDIS_URL', 'redis://redis:6379/0'),
    }
}

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/code/conduit/logs/django.log',
            'formatter': 'verbose',
            'delay': True,  # Delay file creation until first write
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

print("Production settings loaded")
print(f"INSTALLED_APPS: {INSTALLED_APPS}")
print(f"AUTH_USER_MODEL: {AUTH_USER_MODEL}")
print(f"Log directory exists: {os.path.exists('/code/conduit/logs')}")
print(f"Log file path: {LOGGING['handlers']['file']['filename']}")

DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10 MB

# INSTALLED_APPS += ['corsheaders']  # Removed duplicate entry - already in base.py

MIDDLEWARE = ['corsheaders.middleware.CorsMiddleware'] + MIDDLEWARE

# Rate limiting
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'
RATELIMIT_VIEW = 'django.http.HttpResponseTooManyRequests'

# Database connection pooling
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': get_env_variable('POSTGRES_DB'),
        'USER': get_env_variable('POSTGRES_USER'),
        'PASSWORD': get_env_variable('POSTGRES_PASSWORD'),
        'HOST': get_env_variable('POSTGRES_HOST'),
        'PORT': get_env_variable('POSTGRES_PORT'),
        'CONN_MAX_AGE': 600,  # 10 minute connection persistence
        'OPTIONS': {
            'sslmode': 'prefer',  # Changed from 'require' to 'prefer'
            'target_session_attrs': 'read-write',
        },
    }
}

# Sentry integration for error tracking
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Sentry Configuration
try:
    sentry_dsn = get_env_variable("SENTRY_DSN")
    sentry_sdk.init(
        dsn=sentry_dsn,
        integrations=[DjangoIntegration()],
        traces_sample_rate=1.0,
        send_default_pii=True,
        debug=True,  # Enable debug logging
    )
    print("Sentry initialized successfully")
except Exception as e:
    print(f"Failed to initialize Sentry: {str(e)}")

# Django prometheus for metrics
INSTALLED_APPS += ['django_prometheus']
MIDDLEWARE = ['django_prometheus.middleware.PrometheusBeforeMiddleware'] + MIDDLEWARE
MIDDLEWARE.append('django_prometheus.middleware.PrometheusAfterMiddleware')
